{"version":3,"sources":["Bubble.js","App.js","reportWebVitals.js","index.js"],"names":["score","Bubble","x","useState","isPopped","setIsPopped","className","alt","onClick","document","getElementById","play","console","log","innerHTML","src","App","gameInit","setGameInit","useEffect","bMat","i","push","makeMat","id","Button","variant","color","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"0NAGWA,EAAQ,EAUZ,SAASC,EAAOC,GAAI,IAAD,EACQC,oBAAS,GADjB,mBACjBC,EADiB,KACPC,EADO,KAYxB,OACE,qBACEC,UAAU,SACVC,IAAI,SACJC,QAbJ,WACEH,GAAY,GAEQI,SAASC,eAAe,YAChCC,OAfdX,IACAY,QAAQC,IAAIb,GAEOS,SAASC,eAAe,cAEhCI,UAAY,SAAWd,GAoB9Be,IAAMX,EAAmB,sBAARF,EAAEa,MCsCVC,MA/Df,WAAgB,IAAD,EACmBb,oBAAS,GAD5B,mBACNc,EADM,KACIC,EADJ,OAE2Bf,mBAASH,GAFpC,mBAmCb,OAnCa,UAKbmB,qBAAU,cAAU,IA8BfF,EAmBD,sBAAKX,UAAU,MAAf,UA/CJ,WACE,IAAIc,EAAO,GACPC,EAAI,EACR,IAAKA,EAAI,EAAGA,GAAK,GAAIA,IACnBD,EAAKE,KAAK,cAACrB,EAAD,CAAgBc,IAAI,oBAAPM,IAGzB,OAAO,qBAAKf,UAAU,aAAf,SAA6Bc,IAyC/BG,GACD,qBAAKC,GAAG,aAAR,sBACA,uBAAOA,GAAG,WAAWT,IAAI,6BApB3B,sBAAKS,GAAG,WAAR,UACE,8BACE,oDAEF,uBACA,cAACC,EAAA,EAAD,CACEC,QAAQ,YACRC,MAAM,UACNrB,UAAU,YACVE,QA7BR,WACEU,GAAY,IAwBR,sBCnCOU,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEF9B,SAASC,eAAe,SAM1BkB,M","file":"static/js/main.53101766.chunk.js","sourcesContent":["import React from \"react\";\nimport { useState } from \"react\";\n\nexport let score = 0;\nfunction addScore() {\n  score++;\n  console.log(score);\n\n  const scoreboard = document.getElementById(\"scoreboard\");\n\n  scoreboard.innerHTML = \"Score:\" + score;\n}\n\nexport function Bubble(x) {\n  const [isPopped, setIsPopped] = useState(false);\n\n  function pop() {\n    setIsPopped(true);\n\n    const soundEffect = document.getElementById(\"popSound\");\n    soundEffect.play();\n\n    addScore();\n  }\n\n  return (\n    <img\n      className=\"bubble\"\n      alt=\"bubble\"\n      onClick={pop}\n      src={!isPopped ? x.src : \"/imgs/bubblePop.png\"}\n    />\n  );\n}\n","import \"./App.css\";\nimport { Button, LinearProgress } from \"@material-ui/core\";\nimport { useEffect, useState } from \"react\";\nimport { Bubble, score } from \"./Bubble\";\n\nfunction App() {\n  const [gameInit, setGameInit] = useState(false);\n  const [currentScore, setCurrentScore] = useState(score);\n  // const [tick, setTick] = useState(0);\n\n  useEffect(() => {}, []);\n\n  function makeMat() {\n    let bMat = [];\n    let i = 0;\n    for (i = 0; i <= 50; i++) {\n      bMat.push(<Bubble key={i} src=\"/imgs/bubble.png\" />);\n    }\n\n    return <div className=\"bubble-mat\">{bMat}</div>;\n  }\n\n  function initGame() {\n    setGameInit(true);\n    // countDown();\n  }\n\n  // let time = 60;\n  // function countDown() {\n  //   setInterval(function () {\n  //     setTick(tick + 1);\n\n  //     time--;\n  //     console.log(tick);\n  //   }, 1000);\n\n  //   return <div>{time}</div>;\n  // }\n\n  //app return\n  if (!gameInit) {\n    return (\n      <div id=\"pre-game\">\n        <div>\n          <h1>Pop the Bubbles!</h1>\n        </div>\n        <br />\n        <Button\n          variant=\"contained\"\n          color=\"primary\"\n          className=\"start-btn\"\n          onClick={initGame}\n        >\n          Play\n        </Button>\n      </div>\n    );\n  } else {\n    return (\n      <div className=\"App\">\n        {makeMat()}\n        <div id=\"scoreboard\">Score: 0</div>\n        <audio id=\"popSound\" src=\"/sounds/pop_sound.wav\"></audio>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}